# Multi-stage build for optimized production image - LOCAL VERSION
FROM node:20.11-alpine AS base

# Install pnpm globally
RUN npm install -g pnpm

# Stage 1: Dependencies
FROM base AS deps
WORKDIR /app

# Copy package files
COPY apps/recipe-blog/package.json ./
COPY apps/recipe-blog/pnpm-lock.yaml ./

# Install dependencies without frozen lockfile for local testing
RUN pnpm install --production=false

# Stage 2: Build
FROM base AS builder
WORKDIR /app

# Copy source code and package files
COPY apps/recipe-blog/ ./

# Install dependencies inside the container
RUN CI=true pnpm install --production=false

# Build the application
RUN pnpm run build

# Stage 3: Runtime
FROM base AS runner
WORKDIR /app

# Create non-root user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy built application
COPY --from=builder /app/public ./public

# Set correct permission for prerender cache
RUN mkdir .next
RUN chown nextjs:nodejs .next

# Copy the standalone build output
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Health check
RUN apk add --no-cache curl
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000/api/health || exit 1

USER nextjs

EXPOSE 3000

# Start the application
CMD ["node", "server.js"]
